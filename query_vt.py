import vt
import os
import asyncio
import tqdm.asyncio


API_KEY = '392b3d40e52b022350dfe617540b42ec3c771003d441e5bff82d6e20c2ae6831'


async def is_malware(file_path, malware_path, benign_path, client: vt.Client):
    with open(file_path, 'rb') as f:
        analysis_obj = await client.scan_file_async(f, wait_for_completion=True)
        stats = analysis_obj.stats
        file_name = file_path.split('/')[-1]

        # For testing...
        # stats = {'harmless': 1 if int(file_name[0]) % 2 == 0 else 0,
        #          'malicious': 1 if int(file_name[0]) % 2 == 0 else 0
        #          }

        if stats['harmless'] > 0 or stats['malicious'] > 0:
            os.rename(file_path, os.path.join(malware_path, file_name))
            return True
        else:
            os.rename(file_path, os.path.join(benign_path, file_name))
            return False


async def main(dir_path):
    malware_path = os.path.abspath(dir_path) + "_malware"
    benign_path = dir_path + "_benign"
    if not os.path.isdir(malware_path):
        os.mkdir(malware_path, mode=0o777)
    if not os.path.isdir(benign_path):
        os.mkdir(benign_path, mode=0o777)

    client = vt.Client(API_KEY)
    task = []

    # for file in os.listdir(dir_path):
    #     task.append(is_malware(os.path.join(dir_path, file), client))

    with os.scandir(dir_path) as it:
        for entry in it:
            if not entry.name.startswith('.') and entry.is_file():
                task.append(is_malware(os.path.join(dir_path, entry.name), malware_path, benign_path, client))

    scan_res = await tqdm.asyncio.tqdm.gather(*task)


if __name__ == '__main__':
    asyncio.run(main('./docx_benign'))
