#!/usr/bin/env python3
import os

import requests
import argparse
import hashlib
import json
from tqdm import tqdm


__author__ = "Corsin Camichel"
__copyright__ = "Copyright 2020, Corsin Camichel"
__license__ = "Creative Commons Attribution-ShareAlike 4.0 International License."
__version__ = "1.0"
__email__ = "cocaman@gmail.com"


BUF_SIZE = 65536


def check_sha256(s):
    if s == "":
        return
    if len(s) != 64:
        raise argparse.ArgumentTypeError("Please use sha256 value instead of '" + s + "'")
    return str(s)


def get_sha256(file_path):
    sha256 = hashlib.sha256()

    with open(file_path, 'rb') as f:
        while True:
            data = f.read(BUF_SIZE)
            if not data:
                break
            sha256.update(data)

    return sha256.digest()


# parser = argparse.ArgumentParser(description='Download a malware sample from Malware Bazaar by abuse.ch')
# parser.add_argument('-s', '--hash', help='File hash (sha256) to download', metavar="HASH", required=True,
#                     type=check_sha256)
# parser.add_argument('-u', '--unzip', help='Unzip the downloaded file', required=False, default=False,
#                     action='store_true')
# parser.add_argument('-i', '--info', help='Get information on a hash (do not download file)', required=False,
#                     default=False, action='store_true')
#
# args = parser.parse_args()

folder = 'doc_benign'

with os.scandir(folder) as it:
    os.chdir(folder)
    for entry in it:
        if not entry.name.startswith('.') and entry.is_file():
            sha256 = get_sha256(os.path.abspath(entry.name))

            headers = {'API-KEY': ''}

            data = {
                'query': 'get_info',
                'hash': sha256.hex(),
            }

            # print(data)
            response = requests.post('https://mb-api.abuse.ch/api/v1/', data=data, timeout=15, headers=headers)
            if response.status_code == 200:
                response_ = response.json()
                if response_['query_status']:
                    if response_['query_status'] != 'hash_not_found':
                        print(response_)

