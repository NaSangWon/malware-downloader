#!/usr/bin/env python3
import requests
import os
import pyzipper
from jq import jq

"""
Query and download malware samples from MalwareBazzaar
"""

ZIP_FILE_PATH = 'ooxml'
UNZIP_FILE_PATH = 'ooxml_unzip'
LIMIT_PER_TYPE = 100
ZIP_PASSWORD = b'infected'
BASE_URL = 'https://mb-api.abuse.ch/api/v1/'


def get_sha256(limit=LIMIT_PER_TYPE):
    """
    Get recent OOXML file hash
    :return: 2 dim array of hashes
    """
    file_types = ['docx', 'pptx', 'xlsx']
    jq_query = ".data[].sha256_hash"
    sha256 = []

    for file_type in file_types:
        data = {
            'query': 'get_file_type',
            'file_type': ''+file_type+'',
            'limit': limit
        }

        response = requests.post(BASE_URL, data=data, timeout=15)
        json_response = response.content.decode('utf-8', 'ignore')
        parsed = jq(jq_query).transform(text=json_response, multiple_output=True)
        sha256.append(parsed)
        print(f'Found sample: {parsed}')

    print(f'Hash download complete.')

    return sha256


def download(sha256_2dim_):
    """
    Download sample
    :param sha256_2dim_: Must be 2 dim list
    """
    for sha256s in sha256_2dim_:
        for sha256 in sha256s:
            path = ZIP_FILE_PATH + '/' + sha256 + '.zip'
            if os.path.isfile(path) == False:
                data = {'query': 'get_file', 'sha256_hash': sha256}
                response = requests.post(BASE_URL, data=data, timeout=15, allow_redirects=True)
                open(path, 'wb').write(response.content)


def unzip(zip_path=ZIP_FILE_PATH, unzip_path=UNZIP_FILE_PATH):
    """
    Unzip sample
    :param zip_path:
    :param unzip_path:
    :return:
    """
    for zip_file in os.listdir(zip_path):
        with pyzipper.AESZipFile(zip_path + '/' + zip_file) as zf:
            zf.pwd = ZIP_PASSWORD
            my_secrets = zf.extractall(unzip_path)


def remove_non_ooxml(unzip_path=UNZIP_FILE_PATH):
    for file in os.listdir(unzip_path):
        file_path = unzip_path + '/' + file
        with open(file_path, "r+b") as f:
            file_header = f.read(2)
            if file_header.hex() != '504b':  # If not OOXML
                os.remove(file_path)
                print(f'{file_path} removed. Not OOXML')


if __name__ == '__main__':
    sha256_2dim = get_sha256()
    download(sha256_2dim)
    unzip()
    # remove_non_ooxml()
