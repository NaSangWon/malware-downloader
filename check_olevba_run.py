from oletools.olevba import *
from oletools.mraptor import *
from tqdm import tqdm


def check_olevba_run(dir_path, delete: bool):
    scan_res = {
        'Unsupported': 0,
        'VBA Macros found': 0,
        'No VBA found': 0
    }

    for entry in tqdm(os.scandir(dir_path)):
        if entry.is_file():
            absolute_path = os.path.join(dir_path, entry.name)
            print(absolute_path)
            unsupported = False
            vba_not_found = False

            try:
                vba_parser = VBA_Parser(absolute_path)
                if vba_parser.detect_vba_macros():
                    scan_res['VBA Macros found'] += 1
                else:
                    scan_res['No VBA found'] += 1
                    vba_not_found = True
            except FileOpenError:
                scan_res['Unsupported'] += 1
                unsupported = True
            except AssertionError:
                scan_res['Unsupported'] += 1
                unsupported = True
            except AttributeError:
                scan_res['Unsupported'] += 1
                unsupported = True

            if delete:
                if vba_not_found or unsupported:
                    os.remove(absolute_path)

    print(scan_res)
    return scan_res


def check_mraptor_run(dir_path, delete: bool):
    scan_res = {
        'Unsupported': 0,
        'VBA Macros found': 0,
        'No VBA found': 0
    }

    for entry in tqdm(os.scandir(dir_path)):
        if entry.is_file():
            absolute_path = os.path.join(dir_path, entry.name)
            print(absolute_path)
            unsupported = False
            vba_not_found = False

            try:
                vba_parser = VBA_Parser(absolute_path)
                if vba_parser.detect_vba_macros():
                    scan_res['VBA Macros found'] += 1
                else:
                    scan_res['No VBA found'] += 1
                    vba_not_found = True
            except FileOpenError:
                scan_res['Unsupported'] += 1
                unsupported = True
            except AssertionError:
                scan_res['Unsupported'] += 1
                unsupported = True
            except AttributeError:
                scan_res['Unsupported'] += 1
                unsupported = True

            if delete:
                if vba_not_found or unsupported:
                    os.remove(absolute_path)

    print(scan_res)
    return scan_res


if __name__ == "__main__":
    check_olevba_run('/mnt/hgfs/Downloads/doc', False)
