#!/usr/bin/env python3
import requests
import os
import pyzipper
from tqdm import tqdm
from jq import jq

"""
Query and download malware samples from MalwareBazzaar
"""


def get_sha256(file_types: list, limit):
    """
    Get recent OOXML file hash
    :return: 2 dim array of hashes
    """
    jq_query = ".data[].sha256_hash"
    sha256 = []

    for file_type in file_types:
        data = {
            'query': 'get_file_type',
            'file_type': ''+file_type+'',
            'limit': limit
        }

        response = requests.post(BASE_URL, data=data, timeout=15)
        json_response = response.content.decode('utf-8', 'ignore')
        parsed = jq(jq_query).transform(text=json_response, multiple_output=True)
        sha256.append(parsed)
        print(f'Found {file_type} sample: {parsed}')

    print(f'Hash download complete.')

    return sha256


def download(sha256_2dim_):
    """
    Download sample
    :param sha256_2dim_: Must be 2 dim list
    """
    for sha256s in sha256_2dim_:
        for sha256 in tqdm(sha256s):
            path = ZIP_FILE_PATH + '/' + sha256 + '.zip'
            if not os.path.isfile(path):
                data = {'query': 'get_file', 'sha256_hash': sha256}
                response = requests.post(BASE_URL, data=data, timeout=15, allow_redirects=True)
                open(path, 'wb').write(response.content)


def unzip(zip_path, unzip_path):
    """
    Unzip sample
    :param zip_path:
    :param unzip_path:
    :return:
    """
    zip_files = os.listdir(zip_path)
    unzipped_files_hash = [path.split('.')[0] for path in os.listdir(unzip_path)]
    for zip_file in zip_files:
        if zip_file.split('.')[0] not in unzipped_files_hash:
            try:
                with pyzipper.AESZipFile(zip_path + '/' + zip_file) as zf:
                    zf.pwd = ZIP_PASSWORD
                    my_secrets = zf.extractall(unzip_path)
            except pyzipper.BadZipfile:
                print(f'{zip_file} is not a zip file')


def remove_non_ooxml(unzip_path):
    for file in os.listdir(unzip_path):
        file_path = unzip_path + '/' + file
        with open(file_path, "r+b") as f:
            file_header = f.read(2)
            if file_header.hex() != '504b':  # If not OOXML
                os.remove(file_path)
                print(f'{file_path} removed. Not OOXML')


def remove_file(signature: str, unzip_path):
    """
    Remove files which match certain signature
    :param unzip_path:
    :param signature:
    for example...
    OOXML == '504b'
    RTF == '7b5c72746631'
    :return:
    """
    for file in os.listdir(unzip_path):
        file_path = unzip_path + '/' + file
        with open(file_path, "r+b") as f:
            file_header = f.read(len(signature) // 2)
            if file_header.hex() == signature:
                os.remove(file_path)
                print(f'{file_path} removed.')


if __name__ == '__main__':
    ZIP_FILE_PATH = '/media/user/SanDisk-128G/malware/ppt_zip'
    UNZIP_FILE_PATH = '/media/user/SanDisk-128G/ppt'
    LIMIT_PER_TYPE = 1000
    ZIP_PASSWORD = b'infected'
    BASE_URL = 'https://mb-api.abuse.ch/api/v1/'

    sha256_2dim = get_sha256(['ppt'], LIMIT_PER_TYPE)
    download(sha256_2dim)
    unzip(ZIP_FILE_PATH, UNZIP_FILE_PATH)
    # remove_file('7b5c72746631', 'docx_benign')
